/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three"
import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import { useFrame } from "@react-three/fiber"
// import { Raycaster } from "three"
export default function Model({ scroll, raycaster, ...props }) {
    const group = useRef()
    const t = useRef(0)
    const { nodes, materials, animations } = useGLTF('/map.glb')
    const { actions, mixer } = useAnimations(animations, group)
    const [hovered, setHovered] = useState(false)
    useEffect(() => {
        // if (hovered) group.current.getObjectByName(hovered).material.color.set("white")
        document.body.style.cursor = hovered ? "pointer" : "auto"
        if (hovered) {
            group.current.getObjectByName('button').children[1].material.color.set('white')
        }
        else {
            group.current.getObjectByName('button').children[1].material.color.set('#8BB8C2')
        }


    }, [hovered])
    useEffect(() => {
        void actions["CameraAction.018"].play()
        actions.clampWhenFinished = true;
    }, [])
    const onHover = (e) => {
        e.stopPropagation()
        setHovered(true)
    }
    const unHover = (e) => {
        e.stopPropagation()
        setHovered(null)
    }
    useFrame((state) => {
        const et = state.clock.elapsedTime

        group.current.children[4].scale.x = (0.1 * Math.sin(et) + 1) / 80
        group.current.children[4].scale.z = (0.1 * Math.sin(et) + 1) / 80

        t.current = THREE.MathUtils.lerp(t.current, actions["CameraAction.018"]._clip.duration * scroll.current, 0.05)
        if (t.current >= 20.958) {
            mixer.setTime(20.958)
        }
        else if (t.current <= 0) {
            mixer.setTime(0)
        }
        else {
            mixer.setTime(t.current)
        }
        // console.log(t.current);

        group.current.children[0].children.forEach((child, index) => {
            // child.material.color.lerp(color.set(hovered === child.name ? "tomato" : "#202020").convertSRGBToLinear(), hovered ? 0.1 : 0.05)

            // child.position.y = Math.sin((et + index * 2000) / 2) / 10
            child.rotation.x = Math.sin((et + index * 2000) / 3) / 100
            child.rotation.y = Math.cos((et + index * 2000) / 2) / 100
            child.rotation.z = Math.sin((et + index * 2000) / 3) / 100
            // console.log(child);


        })
    })
    return (
        <group ref={group} {...props} dispose={null}>
            <group
                name="Camera"
                position={[-32.0827, 24.7164, 17.138]}
                rotation={[1.5291, -0.0689, 0.4423]}>
                <group
                    name="Camera_Orientation"
                    position={[0, 1.1153, 0]}
                    rotation={[-0.0103, -0.001, 0.0024]}>
                    <PerspectiveCamera
                        makeDefault
                        far={1000}
                        near={0.1}
                        fov={47.5974}
                        rotation={[-Math.PI / 2, 0, 0]}
                    />
                </group>
            </group>
            <group
                name="Statue_of_Liberty"
                position={[25.384, 7.4225, 8.6914]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.0639, 0.0639, 0.0639]}>
                <group name="Statue" position={[1.5167, 1.7089, 118.0964]} scale={[0.5566, 0.5566, 0.5566]}>
                    <mesh geometry={nodes.Mesh188.geometry} material={materials['Mat.5']} />
                    <mesh geometry={nodes.Mesh188_1.geometry} material={materials['Mat.3']} />
                </group>
            </group>
            <group
                name="drug"
                position={[-7.2836, 2.946, 9.2494]}
                rotation={[-1.8758, 0.0508, -0.1994]}
                scale={[-0.489, 0.246, -0.489]}>
                <mesh geometry={nodes.coin220.geometry} material={materials.white} />
                <mesh geometry={nodes.coin220_1.geometry} material={materials['white.027']} />
                <mesh geometry={nodes.coin220_2.geometry} material={materials['blue.015']} />
                <mesh geometry={nodes.coin220_3.geometry} material={materials['Material.007']} />
            </group>
            <group
                name="basketball"
                position={[-28.5501, 21.0682, 11.2462]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.0373, 0.0373, 0.0373]}>
                <mesh
                    geometry={nodes.lowpolyPeopleSportsMan05.geometry}
                    material={materials['Default OBJ.001']}
                />
                <mesh
                    geometry={nodes.lowpolyPeopleSportsMan05_1.geometry}
                    material={materials['Material.001']}
                />
                <mesh
                    geometry={nodes.lowpolyPeopleSportsMan05_2.geometry}
                    material={materials['Material.003']}
                />
                <mesh
                    geometry={nodes.lowpolyPeopleSportsMan05_3.geometry}
                    material={materials['Material.005']}
                />
            </group>
            <group
                name="button"
                position={[26.3158, 3.7881, 8.8025]}
                rotation={[1.3527, -0.642, 0.5148]}
                scale={[0.0155, 0.0155, 0.0155]}
                onClick={() => window.open("mailto:" + 'chrischen@mail.com' + '?subject=' + `Let's come out for a cup of coffee!` + '&body=' + 'Hey Chris!')}
                onPointerOver={onHover}
                onPointerOut={unHover}>
                <mesh geometry={nodes.Text002.geometry} material={materials['Material.004']} />
                <mesh geometry={nodes.Text002_1.geometry} material={materials['Material.006']} />
            </group>
            <mesh
                name="Text"
                geometry={nodes.Text.geometry}
                material={materials['Material.002']}
                position={[26.055, 3.9351, 8.91]}
                rotation={[1.5404, -0.5187, 0.6869]}
                scale={[0.0736, 0.0736, 0.0736]}
            />
            <group
                position={[26.3063, 3.8337, 8.7666]}
                rotation={[1.3527, -0.642, 0.5148]}

                scale={[0.008, 0.008, 0.008]}>
                <mesh geometry={nodes.Text034.geometry} material={materials['Material.012']} />
                <mesh geometry={nodes.Text034_1.geometry} material={materials['Material.013']} />
                <mesh geometry={nodes.Text034_2.geometry} material={materials['Material.011']} />
                <mesh geometry={nodes.Text034_3.geometry} material={materials['Material.014']} />
                <mesh geometry={nodes.Text034_4.geometry} material={materials['Material.008']} />
                <mesh geometry={nodes.Text034_5.geometry} material={materials['Material.010']} />
                <mesh geometry={nodes.Text034_6.geometry} material={materials['Material.009']} />
            </group>
            <group
                position={[8.0889, 2.6516, 8.4098]}
                rotation={[-1.8758, 0.0508, -0.1994]}
                scale={[-0.6485, 0.3262, -0.6485]}>
                <mesh geometry={nodes.coin1745.geometry} material={materials['gold.001']} />
                <mesh geometry={nodes.coin1745_1.geometry} material={materials.green} />
                <mesh geometry={nodes.coin1745_2.geometry} material={materials.green_dark} />
                <mesh geometry={nodes.coin1745_3.geometry} material={materials['white.001']} />
            </group>
        </group>
    )
}

useGLTF.preload('/map.glb')
